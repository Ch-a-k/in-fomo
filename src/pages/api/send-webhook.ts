import type { NextApiRequest, NextApiResponse } from 'next';

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ API
type ResponseData = {
  success: boolean;
  message?: string;
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ API-–∑–∞–ø—Ä–æ—Å–∞
export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<ResponseData>
) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ - POST
  if (req.method !== 'POST') {
    return res.status(405).json({ success: false, message: 'Method Not Allowed' });
  }

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const { name, contact, contactType, message, selectedPackage } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!name || !contact || !contactType) {
      return res.status(400).json({ success: false, message: 'Missing required fields' });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
    const telegramMessage = `
üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –±–æ—Ç–∞*

üì¶ *–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç*: ${selectedPackage || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üë§ *–ò–º—è*: ${name}
üìû *–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏*: ${contactType}
üì± *–ö–æ–Ω—Ç–∞–∫—Ç*: ${contact}
${message ? `üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ*: ${message}` : ''}

‚è∞ *–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏*: ${new Date().toLocaleString('ru-RU')}
    `.trim();

    // URL –≤–µ–±—Ö—É–∫–∞ Telegram –±–æ—Ç–∞ (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
    const webhookUrl = process.env.TELEGRAM_WEBHOOK_URL;
    
    if (!webhookUrl) {
      console.error('TELEGRAM_WEBHOOK_URL not configured');
      return res.status(500).json({ success: false, message: 'Webhook URL not configured' });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Telegram
    const telegramResponse = await fetch(webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: process.env.TELEGRAM_CHAT_ID,
        text: telegramMessage,
        parse_mode: 'Markdown',
      }),
    });

    if (!telegramResponse.ok) {
      const errorData = await telegramResponse.text();
      console.error('Telegram API error:', errorData);
      return res.status(500).json({ success: false, message: 'Error sending to Telegram' });
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return res.status(200).json({ success: true, message: 'Message sent successfully' });
  } catch (error) {
    console.error('Error in webhook handler:', error);
    return res.status(500).json({ success: false, message: 'Internal Server Error' });
  }
} 